{"version":3,"sources":["info_charts.es6"],"names":[],"mappings":"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","file":"info_charts.js","sourcesContent":["/**\n * Created by yarden on 8/6/15.\n */\n\nimport d3 from 'd3';\nimport postal from 'postal';\n\nimport * as utils from './utils';\nimport chart3 from './components/chart3'\nimport * as patients from './patients';\nimport * as tagSelection from './tag_selection';\nimport {topicsMap} from './service';\n\nconst MIN_Y = 5;\nconst CHART_MAX_WIDTH = 500;\n\nexport default function() {\n  let dateFormat = d3.time.format('%Y-%m-%d');\n  let fromDate, toDate;\n\n  let summaryData = [];\n  let summaryChart = chart3('#summary-chart', true);\n\n  let group;\n  let selected = new Map();\n\n  let charts = new Map([\n    ['#summary-chart', summaryChart]\n    //['#selected-chart', selectedChart],\n  ]);\n\n  postal.subscribe({channel: 'global', topic: 'data.changed', callback: dataChanged});\n  postal.subscribe({channel: 'global', topic: 'render', callback: render});\n\n\n  function dataChanged(data) {\n    fromDate = dateFormat.parse(data.from);\n    toDate = dateFormat.parse(data.to);\n    //let f = d3.time.day.ceil(from),\n    //    t = d3.time.day.offset(d3.time.day.ceil(to), 1),\n    //    range = d3.time.day.range(f, t),\n    //    scale = d3.time.scale()\n    //      .domain([f, t])\n    //      .rangeRound([0, Math.max(range.length, MIN_Y)]);  // hack: rangeRound still give fraction if range is 0-1\n    //\n    //let bins = range.map(function (day) { return {x: day, value: 0, items: []}; });\n    //for (let item of data.domain) {\n    //  let i = scale(item.date);\n    //  bins[i].value++;\n    //  bins[i].items.push(item);\n    //}\n\n    //summaryData = [{label: 'data', color: 'black', values: bins, right: true}];\n    //summaryChart.data(summaryData);\n  }\n\n  function render() {\n    let from  = d3.time.day.ceil(fromDate),\n        to    = d3.time.day.offset(d3.time.day.ceil(toDate), 1),\n        range = d3.time.day.range(from, to),\n        scale = d3.time.scale()\n          .domain([from, to])\n          .rangeRound([0, Math.max(range.length, MIN_Y)]);  // hack: rangeRound still give fraction if range is 0-1\n\n\n    if (selected.size > 0) {\n      for(let entry of selected.entries()) {\n        if (!tagSelection.isSelected(entry[0])) {\n          utils.release_color(entry[1]);\n          selected.delete(entry[0]);\n        }\n      }\n    }\n    if (tagSelection.selected.size > 0) {\n      for(let tid of tagSelection.selected) {\n        if (!selected.has(tid)) {\n          let topic = topicsMap.get(tid);\n          utils.assign_color(topic);\n          selected.set(tid, topic);\n        }\n      }\n    }\n\n    let selectedSeries = [];\n\n    let map = new Map();\n    for (let r of patients.relations) {\n      if (tagSelection.isSelected(r.tag_id)) {\n        let entry = map.get(r.tag_id);\n        if (!entry) map.set(r.tag_id, entry = []);\n        entry.push(patients.encountersMap.get(r.enc_id));\n      }\n    }\n\n    for (let entry of map) {\n      let topic = topicsMap.get(entry[0]);\n      selectedSeries.push({\n        label:  topic.name,\n        color:  topic.color,\n        type:   'line',\n        marker: 'solid',\n        values: histogram(entry[1], range, scale)\n      });\n    }\n    //for(let item of group.all()) {\n    //  if (tagSelection.isSelected(item.key)) {\n    //    let topic = topicsMap.get(item.key);\n    //    let records = item.value.map( v => patients.encountersMap.get(v.enc_id));\n    //    utils.assign_color(topic);\n    //    selectedSeries.push({\n    //      label:  topic.name,\n    //      color:  topic.color,\n    //      type:   'line',\n    //      marker: 'solid',\n    //      values: histogram(records, range, scale)\n    //    });\n    //  }\n    //}\n\n    //for(let tag of tagSelection.excluded()) {\n    //  selectedSeries.push({\n    //      label:  tag.concept.label,\n    //      color:  tag.color,\n    //      type:   'line',\n    //      marker: 'dash',\n    //      values:  histogram(tag.items, range, scale)\n    //    }\n    //  );\n    //}\n\n    //selectedSeries.push({\n    //  label: tag.concept.label,\n    //  color: tag.color,\n    //  type: 'line',\n    //  values: histogram(selection.selectedItems(), range)\n    //});\n\n    //selectedChart.data(selectedSeries);\n\n    //selectedSeries.push(summaryData[0]);\n    summaryChart.data(selectedSeries);\n  }\n\n  function toArray(iter) {\n    let a = [];\n    for(let entry of iter) {\n      a.push(entry);\n    }\n    return a;\n  }\n\n\n  function histogram(items, range, scale) {\n    let bins = range.map(function (d) { return {x: d, value: 0, items: []}; });\n    for(let item of items) {\n      let i = scale(item.date);\n      bins[i].value++;\n      bins[i].items.push(item);\n    }\n    return bins;\n  }\n\n  let info = function() {};\n\n  info.group = function(_) {\n    group = _;\n    return this;\n  };\n\n  info.resize = function() {\n    let name, c;\n    for([name, c] of charts) {\n      let w = parseInt(d3.select(name).style('width'));\n      let h = parseInt(d3.select(name).style('height'));\n      c.resize([w, h]);\n    }\n    return this;\n  };\n\n  return info;\n  //{\n  //\n  //  group(_) {\n  //    group = _;\n  //    return this;\n  //  },\n  //\n  //  resize() {\n  //    let name, c;\n  //    for([name, c] of charts) {\n  //      let w = parseInt(d3.select(name).style('width'));\n  //      let h = parseInt(d3.select(name).style('height'));\n  //      c.resize([w, h]);\n  //    }\n  //    return this;\n  //  }\n  //}\n}"]}