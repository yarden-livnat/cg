{"version":3,"sources":["info_pathogens.es6"],"names":[],"mappings":"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","file":"info_pathogens.js","sourcesContent":["/**\n * Created by yarden on 11/19/15.\n */\n\nimport d3 from 'd3';\nimport postal from 'postal';\nimport Lockr from 'lockr';\n\nimport {pathogens_duration} from '../config';\nimport * as service from '../service';\nimport chart3 from '../components/chart3'\n\nlet dateFormat = d3.time.format('%Y-%m-%d');\n\nlet pathogensTimeFormat = d3.time.format.multi([\n  [\"%b %d\", function(d) { return d.getDate() != 1; }],\n  [\"%B\", function(d) { return d.getMonth(); }]\n]);\n\nlet pathogens_scale = d3.time.scale().nice(d3.time.week, 1);\npathogens_scale.tickFormat(d3.format('%b %d'));\npathogens_scale.ticks(d3.time.week, 1);\n\nlet initialized = false;\nlet activePathogens = new Map();\n\nlet from, to, range, from_week, from_year;\n\npostal.subscribe({channel: 'global', topic: 'data.changed', callback: dataChanged});\n\n\nexport function init() {\n\n\n  let items = d3.select('#pathogens-selection').select('ul').selectAll('li')\n    .data(service.pathogens)\n    .enter()\n    .append('li');\n\n  items.append('input')\n    .attr('type', 'checkbox')\n    .attr('value', d => d.name)\n    .on(\"change\", function() {\n      selectPathogen(this.value, this.checked);\n    });\n\n  items.append('span')\n    .text(d => d.name);\n\n\n  let menu = d3.select('#pathogens-selection .items');\n  d3.select('#pathogens-selection').select('.anchor').on('click', function() {\n    if (menu.classed('visible')) {\n      menu.classed('visible', false).style('display', 'none');\n    } else {\n      menu.classed('visible', true).style('display', 'block');\n    }\n  });\n\n  menu.on('blur', function() {\n    menu.classed('visible', false).style('display', 'none');\n  });\n}\n\nfunction dataChanged(params) {\n  to = dateFormat.parse(params.to); //d3.time.week.ceil(params.to);\n  from = d3.time.week(d3.time.day.offset(d3.time.month.offset(to, -pathogens_duration), 1));\n  range = d3.time.week.range(from, to);\n\n  from_week = d3.time.weekOfYear(from);\n  from_year = from.getFullYear();\n\n  if (!initialized) {\n    initialized = true;\n    let list = Lockr.get('pathogens', []);\n    d3.select('#pathogens-selection').selectAll('input')\n      .property('checked', function(d) { return list.indexOf(d.name) != -1;});\n\n    for (let p of list) {\n      selectPathogen(p, true);\n    }\n  } else {\n    for(let name of activePathogens.keys()) {\n      updatePathogens(name);\n    }\n  }\n}\n\nfunction updatePathogens(names) {\n  service.fetch('pathogens', [names], from, /*params.*/to)\n    .then(function(d) {\n      for (let entry of d) {\n        let positive = range.map(function (d) { return {x: d, value: 0, items: []}; });\n        //let negative = range.map(function (d) { return {x: d, value: 0, items: []}; });\n\n        for(let item of entry.rows) {\n          if (item.positive) {\n            item.date = dateFormat.parse(item.date);\n            let i = d3.time.weekOfYear(item.date) + (item.date.getFullYear() - from_year)*52 - from_week;\n            //let bins = item.positive ? positive : negative;\n            positive[i].value++;\n            positive[i].items.push(item);\n          }\n        }\n\n        let series = [\n          {\n            label: 'positive',\n            color: 'red',\n            type: 'line',\n            marker: 'solid',\n            //interpolate: 'step-after',\n            interpolate: 'cardinal',\n            values: positive\n            //}\n            //{\n            //  label: 'negative',\n            //  color: 'green',\n            //  type: 'line',\n            //  marker: 'solid',\n            //  values: negative\n          }];\n        activePathogens.get(entry.name).data(series);\n      }\n    })\n    .catch(function(reason) {\n      console.error('error: ', reason);\n    });\n}\n\nfunction selectPathogen(name, show) {\n  if (show) {\n    let div = d3.select('#pathogens').append('div')\n      .attr('id', 'chart-'+name)\n      .classed('pathogen', true);\n    let x = d3.time.scale()\n      .nice(d3.time.week, 1);\n    x.tickFormat(d3.time.format('%m %d'));\n    x.ticks(d3.time.week, 1);\n    let c = chart3(div).title(name).xscale(x);\n\n    activePathogens.set(name, c);\n    updatePathogens(name);\n  }\n  else {\n    d3.select('#pathogens').select('#chart-'+name).remove();\n    activePathogens.delete(name);\n  }\n\n  Lockr.set('pathogens',Array.from(activePathogens.keys()));\n}"]}