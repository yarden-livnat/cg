{"version":3,"sources":["patients.es6"],"names":[],"mappings":"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","file":"patients.js","sourcesContent":["/**\n * Created by yarden on 8/21/15.\n */\n\nimport crossfilter from 'crossfilter';\n\nlet encounters = crossfilter();\nexport let enc_eid = encounters.dimension(d => d.id); enc_eid.name = 'encounters';\nexport let enc_date = encounters.dimension(d => d.date); enc_date.name = 'encounters';\nexport let enc_zipcode = encounters.dimension(d => d.zipcode); enc_zipcode.name = 'encounters';\n\nlet topics = crossfilter();\nexport let topics_tid = topics.dimension(d => d.id); topics_tid.name = 'topics';\nexport let topics_cat = topics.dimension(d => d.category); topics_cat.name = 'topics';\nexport let topics_sys = topics.dimension(d => d.system); topics_sys.name = 'topics';\n\nlet relations = crossfilter();\nlet rel_eid_p = relations.dimension(r => r.enc_id);\nlet rel_tid_p = relations.dimension(r => r.tag_id);\nexport let rel_tid = relations.dimension(r => r.tag_id); rel_tid.name = 'relations';\n\nlet detectors = new Map();\n\nfunction collect(dim, key) {\n  let s = new Set();\n  for (let g of dim.top(Infinity)) s.add(g[key]);\n  return s;\n}\n\nexport function init(topics_) {\n  topics.add(topics_);\n}\n\nexport function set(data) {\n  enc_eid.filterAll();\n  enc_date.filterAll();\n  enc_zipcode.filterAll();\n  encounters.remove();\n  encounters.add(data.encounters);\n\n  rel_eid_p.filterAll();\n  rel_tid_p.filterAll();\n  relations.remove();\n  relations.add(data.relations);\n\n  let tid = collect(rel_tid, 'tag_id');\n  topics_tid.filter(t => tid.has(t));\n}\n\nfunction updateTags() {\n  console.log('update tags');\n}\n\nexport function addDetector(name) {\n  let cf = crossfilter();\n  let detector = {name: name, cf: cf, eid: cf.dimension(d => d.eid), prob: cf.dimension(d => d.prob)};\n  detector.eid.cf = cf;\n  detector.prob.cf = cf;\n  detectors.set(name, detector);\n\n  // todo: what to return?\n}\n\nexport function update(dimension) {\n  if (dimension.name === 'encounters') {\n    let currentEncounters = collect(enc_eid, 'id');\n\n    //for (let detector of detectors.values()) detector.eid.filter(currentEncounters);\n\n    rel_eid_p.filter( e => currentEncounters.has(e));\n\n    let currentTopics = collect(rel_tid_p, 'tag_id');\n    topics_tid.filter( t => currentTopics.has(t) );\n\n    updateTags();\n  } else if (dimension.name == 'topics') {\n    let currentTopics = collect(topics_tid, 'id');\n    rel_tid_p.filter( t => currentTopics.has(t) );\n\n    let currentEncounters = collect(rel_eid_p, 'enc_id');\n    enc_eid.filter( e => currentEncounters.has(e) );\n\n    detectors.forEach( detector => { detector.eid.filter(e => currentEncounters.has(e) )});\n\n    updateTags();\n    //} else if ( /* is a detector */) {\n    //\n    //} else { /* it's a tags action */\n  }\n}"]}